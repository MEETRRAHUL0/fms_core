// <auto-generated />
using System;
using FMS_Core.Models.EFModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FMS_Core.Migrations
{
    [DbContext(typeof(FMSExpContext))]
    [Migration("20190214060934_MyFirstMigration")]
    partial class MyFirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FMS_Core.Models.EFModels.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.AspNetRoles", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.AspNetUsers", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.TblGst", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Cgst")
                        .HasColumnName("CGST")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Comment")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Gst")
                        .HasColumnName("GST")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Igst")
                        .HasColumnName("IGST")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Sgst")
                        .HasColumnName("SGST")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.ToTable("tbl_GST");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.TblItemStock", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasMaxLength(50);

                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AutoID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BatchNo")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Cgst")
                        .HasColumnName("CGST")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("CreatedDatetime")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Expirydate")
                        .HasColumnType("date");

                    b.Property<decimal?>("Gst")
                        .HasColumnName("GST")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Igst")
                        .HasColumnName("IGST")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("InvoiceNo")
                        .HasMaxLength(50);

                    b.Property<string>("ItemId")
                        .HasColumnName("ItemID")
                        .HasMaxLength(50);

                    b.Property<decimal?>("ItemwiseDiscount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("ManufactureDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("Mrp")
                        .HasColumnName("MRP")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("PricePerUnit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("PricePerUnitAfterDiscount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("PurchaseId")
                        .HasColumnName("PurchaseID")
                        .HasMaxLength(50);

                    b.Property<int?>("Qty");

                    b.Property<string>("SaleId")
                        .HasColumnName("SaleID")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Sgst")
                        .HasColumnName("SGST")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("StockType")
                        .HasMaxLength(50);

                    b.Property<decimal?>("TotalPriceAfterTax")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("TotalPriceBeforeTax")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("SaleId");

                    b.ToTable("tbl_ItemStock");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.TblItemType", b =>
                {
                    b.Property<int>("ItemTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ItemType")
                        .HasMaxLength(50);

                    b.HasKey("ItemTypeId");

                    b.ToTable("tbl_ItemType");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.TblItemUnits", b =>
                {
                    b.Property<int>("MeasurintUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MeasurintUnitID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MeasuringUnits")
                        .HasMaxLength(50);

                    b.HasKey("MeasurintUnitId");

                    b.ToTable("tbl_ItemUnits");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.TblItems", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasMaxLength(50);

                    b.Property<string>("BarCode")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("CreatedDatetime")
                        .HasColumnType("date");

                    b.Property<int?>("Gst")
                        .HasColumnName("GST");

                    b.Property<string>("HsnSacNo")
                        .HasColumnName("HSN_SAC_NO")
                        .HasMaxLength(50);

                    b.Property<string>("ItemUniqueDescription")
                        .HasMaxLength(100);

                    b.Property<string>("Manufacture")
                        .HasMaxLength(100);

                    b.Property<int?>("MeasuringUnit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Photo")
                        .HasMaxLength(50);

                    b.Property<string>("Supplier")
                        .HasMaxLength(50);

                    b.Property<int?>("Type");

                    b.Property<bool?>("UseBatchNo");

                    b.Property<bool?>("UseExpiryDate");

                    b.Property<bool?>("UseMfgDate");

                    b.HasKey("Id");

                    b.HasIndex("Gst");

                    b.HasIndex("MeasuringUnit");

                    b.HasIndex("Supplier");

                    b.HasIndex("Type");

                    b.ToTable("tbl_Items");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.TblMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnName("icon")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsEnable");

                    b.Property<int>("Ordinal")
                        .HasColumnName("ordinal");

                    b.Property<int>("ParentId")
                        .HasColumnName("ParentID");

                    b.Property<string>("Path")
                        .HasColumnName("path")
                        .HasMaxLength(500);

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("tblMenu");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.TblPayment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AutoID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedDatetime")
                        .HasMaxLength(50);

                    b.Property<string>("PartyName")
                        .HasMaxLength(50);

                    b.Property<string>("PaymentDate")
                        .HasMaxLength(50);

                    b.Property<string>("PaymentMode")
                        .HasMaxLength(50);

                    b.Property<string>("Remark")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("PartyName");

                    b.ToTable("tbl_Payment");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.TblPaymentMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsVisible");

                    b.Property<string>("Mode")
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("tbl_PaymentMode");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.TblPurchase", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasMaxLength(50);

                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AutoID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedDatetime")
                        .HasMaxLength(50);

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("GrandTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("OtherCharge")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("PartyInvoiceDate")
                        .HasColumnType("date");

                    b.Property<string>("PartyInvoiceNo")
                        .HasMaxLength(50);

                    b.Property<string>("PartyName")
                        .HasMaxLength(50);

                    b.Property<string>("PaymentDueAfter")
                        .HasMaxLength(50);

                    b.Property<int?>("PaymentMode");

                    b.Property<int?>("PurchaseBook");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<bool?>("ReverseCharge");

                    b.Property<decimal?>("RoundOff")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ScanCopy")
                        .HasMaxLength(100);

                    b.Property<decimal?>("TaxAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("TotalAmountAfterTax")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("TotalAmountBeforeTax")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("PartyName");

                    b.HasIndex("PaymentMode");

                    b.ToTable("tbl_Purchase");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.TblSale", b =>
                {
                    b.Property<string>("SaleId")
                        .HasColumnName("SaleID")
                        .HasMaxLength(50);

                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AutoID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedDatetime")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("CustomerId")
                        .HasColumnName("CustomerID")
                        .HasMaxLength(50);

                    b.Property<decimal?>("DiscountAfterTax")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("GrandTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InvoiceId")
                        .HasColumnName("InvoiceID")
                        .HasMaxLength(50);

                    b.Property<decimal?>("OtherChargeAfterTax")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<bool?>("ReverseCharge");

                    b.Property<decimal?>("RoundOff")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("SubTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Tax")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("TotalValueafterTax")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("SaleId");

                    b.HasIndex("CustomerId");

                    b.ToTable("tbl_Sale");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.TblSequence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PreFix")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("RecordCount");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("tbl_Sequence");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.TblTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AutoID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedDatetime")
                        .HasMaxLength(50);

                    b.Property<string>("EntryDate")
                        .HasMaxLength(50);

                    b.Property<string>("EntryId")
                        .IsRequired()
                        .HasColumnName("EntryID")
                        .HasMaxLength(50);

                    b.Property<string>("EntryType")
                        .HasMaxLength(50);

                    b.Property<string>("PaymentId")
                        .HasColumnName("PaymentID")
                        .HasMaxLength(50);

                    b.Property<string>("PurchaseId")
                        .HasColumnName("PurchaseID")
                        .HasMaxLength(50);

                    b.Property<string>("SalesId")
                        .HasColumnName("SalesID")
                        .HasMaxLength(50);

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<string>("TransactionRef")
                        .HasMaxLength(50);

                    b.Property<string>("TransactionType")
                        .HasMaxLength(50);

                    b.Property<string>("VendorId")
                        .HasColumnName("VendorID")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("SalesId");

                    b.HasIndex("VendorId");

                    b.ToTable("tbl_Transaction");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.TblVendor", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasMaxLength(50);

                    b.Property<string>("AdhaarNo")
                        .HasMaxLength(50);

                    b.Property<string>("Cinno")
                        .HasColumnName("CINNo")
                        .HasMaxLength(50);

                    b.Property<string>("ContactNo")
                        .HasMaxLength(50);

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedDatetime")
                        .HasMaxLength(50);

                    b.Property<decimal?>("CreditInterestRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("CreditLimit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("CreditPeriod");

                    b.Property<decimal?>("DebitInterestRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Dob")
                        .HasColumnName("DOB")
                        .HasMaxLength(50);

                    b.Property<string>("Gstno")
                        .HasColumnName("GSTNo")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<decimal?>("OpeningBalance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("OpeningBalanceDate")
                        .HasMaxLength(50);

                    b.Property<string>("OpeningBalanceType")
                        .HasMaxLength(50);

                    b.Property<string>("Panno")
                        .HasColumnName("PANNo")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(50);

                    b.Property<string>("Photo")
                        .HasMaxLength(100);

                    b.Property<string>("Place")
                        .HasMaxLength(50);

                    b.Property<string>("Remark")
                        .HasMaxLength(500);

                    b.Property<string>("SuretyPerson")
                        .HasMaxLength(50);

                    b.Property<string>("SuretyPersonAddress")
                        .HasMaxLength(500);

                    b.Property<string>("SuretyPersonContactNo")
                        .HasMaxLength(50);

                    b.Property<string>("Tinno")
                        .HasColumnName("TINNo")
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .HasMaxLength(50);

                    b.Property<string>("VendorType")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Type");

                    b.ToTable("tbl_vendor");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.TblVendorAddress", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasMaxLength(50);

                    b.Property<string>("AddLine1")
                        .HasMaxLength(100);

                    b.Property<string>("AddLine2")
                        .HasMaxLength(100);

                    b.Property<string>("AddressType")
                        .HasMaxLength(50);

                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AutoID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<int?>("ContactNo");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("PinCode")
                        .HasMaxLength(50);

                    b.Property<string>("State")
                        .HasMaxLength(50);

                    b.Property<string>("VendorId")
                        .HasColumnName("vendorID")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("tbl_VendorAddress");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.TblVendorType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("ID")
                        .HasMaxLength(50);

                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AutoID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("tbl_vendorType");
                });

            modelBuilder.Entity("FMS_Core.Models.vw_StockAvailable", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("HSN_SAC_NO");

                    b.Property<string>("ItemsID");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<int?>("StockAvailable");

                    b.Property<int>("StockIn");

                    b.Property<int>("StockOut");

                    b.HasKey("Guid");

                    b.ToTable("vw_StockAvailable");
                });

            modelBuilder.Entity("FMS_Core.Models.vw_StockDetails", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BarCode");

                    b.Property<decimal?>("CGST");

                    b.Property<decimal?>("GST");

                    b.Property<string>("HSN_SAC_NO");

                    b.Property<decimal?>("IGST");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("ItemUniqueDescription");

                    b.Property<string>("ItemsID");

                    b.Property<decimal?>("ItemwiseDiscount");

                    b.Property<decimal?>("MRP");

                    b.Property<string>("Manufacture");

                    b.Property<int?>("MeasuringUnit");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<decimal?>("PricePerUnit");

                    b.Property<decimal?>("PricePerUnitAfterDiscount");

                    b.Property<string>("PurchaseID");

                    b.Property<int?>("Qty");

                    b.Property<decimal?>("SGST");

                    b.Property<string>("SaleID");

                    b.Property<string>("StockType");

                    b.Property<decimal?>("TotalPriceAfterTax");

                    b.Property<decimal?>("TotalPriceBeforeTax");

                    b.Property<int?>("Type");

                    b.HasKey("Guid");

                    b.ToTable("vw_StockDetails");
                });

            modelBuilder.Entity("FMS_Core.Models.vw_StockExpirydetails", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BatchNo");

                    b.Property<DateTime?>("Expirydate");

                    b.Property<string>("HSN_SAC_NO");

                    b.Property<string>("ID");

                    b.Property<string>("InvoiceNo");

                    b.Property<string>("ItemType");

                    b.Property<int?>("MeasuringUnit");

                    b.Property<string>("MeasuringUnits");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("PurchaseID");

                    b.Property<int?>("Qty");

                    b.Property<string>("SaleID");

                    b.Property<string>("StockType");

                    b.Property<string>("Supplier");

                    b.HasKey("Guid");

                    b.ToTable("vw_StockExpirydetails");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.AspNetRoleClaims", b =>
                {
                    b.HasOne("FMS_Core.Models.EFModels.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.AspNetUserClaims", b =>
                {
                    b.HasOne("FMS_Core.Models.EFModels.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.AspNetUserLogins", b =>
                {
                    b.HasOne("FMS_Core.Models.EFModels.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.AspNetUserRoles", b =>
                {
                    b.HasOne("FMS_Core.Models.EFModels.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FMS_Core.Models.EFModels.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.AspNetUserTokens", b =>
                {
                    b.HasOne("FMS_Core.Models.EFModels.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.TblItemStock", b =>
                {
                    b.HasOne("FMS_Core.Models.EFModels.TblItems", "Item")
                        .WithMany("TblItemStock")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_tbl_ItemStock_tbl_Items");

                    b.HasOne("FMS_Core.Models.EFModels.TblPurchase", "Purchase")
                        .WithMany("TblItemStock")
                        .HasForeignKey("PurchaseId")
                        .HasConstraintName("FK_tbl_ItemStock_tbl_Purchase");

                    b.HasOne("FMS_Core.Models.EFModels.TblSale", "Sale")
                        .WithMany("TblItemStock")
                        .HasForeignKey("SaleId")
                        .HasConstraintName("FK_tbl_ItemStock_tbl_Sale");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.TblItems", b =>
                {
                    b.HasOne("FMS_Core.Models.EFModels.TblGst", "GstNavigation")
                        .WithMany("TblItems")
                        .HasForeignKey("Gst")
                        .HasConstraintName("FK_tbl_Items_tbl_GST");

                    b.HasOne("FMS_Core.Models.EFModels.TblItemUnits", "MeasuringUnitNavigation")
                        .WithMany("TblItems")
                        .HasForeignKey("MeasuringUnit")
                        .HasConstraintName("FK_tbl_Items_tbl_ItemUnits");

                    b.HasOne("FMS_Core.Models.EFModels.TblVendor", "SupplierNavigation")
                        .WithMany("TblItems")
                        .HasForeignKey("Supplier")
                        .HasConstraintName("FK_tbl_Items_tbl_vendor");

                    b.HasOne("FMS_Core.Models.EFModels.TblItemType", "TypeNavigation")
                        .WithMany("TblItems")
                        .HasForeignKey("Type")
                        .HasConstraintName("FK_tbl_Items_tbl_ItemType");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.TblPayment", b =>
                {
                    b.HasOne("FMS_Core.Models.EFModels.TblVendor", "PartyNameNavigation")
                        .WithMany("TblPayment")
                        .HasForeignKey("PartyName")
                        .HasConstraintName("FK_tbl_Payment_tbl_Payment");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.TblPurchase", b =>
                {
                    b.HasOne("FMS_Core.Models.EFModels.TblVendor", "PartyNameNavigation")
                        .WithMany("TblPurchase")
                        .HasForeignKey("PartyName")
                        .HasConstraintName("FK_tbl_Purchase_tbl_vendor");

                    b.HasOne("FMS_Core.Models.EFModels.TblPaymentMode", "PaymentModeNavigation")
                        .WithMany("TblPurchase")
                        .HasForeignKey("PaymentMode")
                        .HasConstraintName("FK_tbl_Purchase_tbl_PaymentMode");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.TblSale", b =>
                {
                    b.HasOne("FMS_Core.Models.EFModels.TblVendor", "Customer")
                        .WithMany("TblSale")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_tbl_Sale_tbl_vendor");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.TblTransaction", b =>
                {
                    b.HasOne("FMS_Core.Models.EFModels.TblPayment", "Payment")
                        .WithMany("TblTransaction")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK_tbl_Transaction_tbl_Payment");

                    b.HasOne("FMS_Core.Models.EFModels.TblPurchase", "Purchase")
                        .WithMany("TblTransaction")
                        .HasForeignKey("PurchaseId")
                        .HasConstraintName("FK_tbl_Transaction_tbl_Purchase");

                    b.HasOne("FMS_Core.Models.EFModels.TblSale", "Sales")
                        .WithMany("TblTransaction")
                        .HasForeignKey("SalesId")
                        .HasConstraintName("FK_tbl_Transaction_tbl_Sale");

                    b.HasOne("FMS_Core.Models.EFModels.TblVendor", "Vendor")
                        .WithMany("TblTransaction")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_tbl_Transaction_tbl_vendor");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.TblVendor", b =>
                {
                    b.HasOne("FMS_Core.Models.EFModels.TblVendorType", "TypeNavigation")
                        .WithMany("TblVendor")
                        .HasForeignKey("Type")
                        .HasConstraintName("FK_tbl_vendor_tbl_vendorType");
                });

            modelBuilder.Entity("FMS_Core.Models.EFModels.TblVendorAddress", b =>
                {
                    b.HasOne("FMS_Core.Models.EFModels.TblVendor", "Vendor")
                        .WithMany("TblVendorAddress")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_tbl_VendorAddress_tbl_vendor");
                });
#pragma warning restore 612, 618
        }
    }
}
